// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customers {
  customerId                 String     @id @default(uuid())
  customerLastName           String
  customerFirstName          String
  customerAddress            String
  customerCity               String
  customerState              String
  customerZip                String
  customerPhone              String
  customerCell               String
  customerWorkPhone          String
  customerDriverLicense      String
  customerDriverLicenseState String
  Cars                       Cars[]
  Invoices                   Invoices[]
}

model Cars {
  carId                String     @id @default(cuid())
  customerIdentifierId String
  customerIdentifier   Customers  @relation(fields: [customerIdentifierId], references: [customerId])
  carModel             String
  carMake              String
  carYear              Int
  carVIN               String
  carOdometer          Int        @default(0)
  carLicensePlate      String
  carTireSize          String?
  Invoices             Invoices[]
}

model Invoices {
  invoiceId              String           @id @default(uuid())
  invoiceDate            DateTime         @default(now())
  invoiceNumber          String           @unique @default(cuid())
  customerIdenId         String
  customerIden           Customers        @relation(fields: [customerIdenId], references: [customerId])
  customerCarId          String
  customerCar            Cars             @relation(fields: [customerCarId], references: [carId])
  serviceRequest         String
  partsOrderTotalInCents Int?
  laborHourlyRateInCents Int              @default(8000)
  laborTotalCostInCents  Int?
  invoiceDiscountInCents Int?
  taxInPercentage        Float            @default(6.625)
  taxInCents             Int?
  subTotalInCents        Int?
  invoiceTotalInCents    Int
  amountPaidInCents      Int?
  balanceDueInCents      Int?
  paymentType            PaymentCategory  @default(CASH)
  updatedAt              DateTime         @updatedAt
  status                 statusType       @default(PENDING)
  partsId                String?
  parts                  PartsOrderEntry? @relation(fields: [partsId], references: [partsOrderEntryId])
}

model PartsOrderEntry {
  partsOrderEntryId String     @id @default(cuid())
  partStore         String?
  skuNumber         String?    @unique
  description       String?
  listPriceInCents  Int?
  costPriceInCents  Int?
  quantity          Int?
  totalPriceInCents Int?
  laborDescription  String?
  laborHours        Int?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  Invoices          Invoices[]
}

enum PaymentCategory {
  CASH
  CHECK
  CREDIT_CARD
  DEBIT_CARD
  COMPANY_ACCOUNT
}

enum statusType {
  PENDING
  PAID
  CANCELED
}
